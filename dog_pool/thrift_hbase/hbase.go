// This file is automatically generated. Do not modify.

package thrift_hbase

import (
	"fmt"
)

type BatchMutation struct {
	Row       []byte      `thrift:"1,required" json:"row"`
	Mutations []*Mutation `thrift:"2,required" json:"mutations"`
}

type ColumnDescriptor struct {
	Name                  []byte `thrift:"1,required" json:"name"`
	MaxVersions           int32  `thrift:"2,required" json:"maxVersions"`
	Compression           string `thrift:"3,required" json:"compression"`
	InMemory              bool   `thrift:"4,required" json:"inMemory"`
	BloomFilterType       string `thrift:"5,required" json:"bloomFilterType"`
	BloomFilterVectorSize int32  `thrift:"6,required" json:"bloomFilterVectorSize"`
	BloomFilterNbHashes   int32  `thrift:"7,required" json:"bloomFilterNbHashes"`
	BlockCacheEnabled     bool   `thrift:"8,required" json:"blockCacheEnabled"`
	TimeToLive            int32  `thrift:"9,required" json:"timeToLive"`
}

type Mutation struct {
	IsDelete   bool   `thrift:"1,required" json:"isDelete"`
	Column     []byte `thrift:"2,required" json:"column"`
	Value      []byte `thrift:"3,required" json:"value"`
	WriteToWAL bool   `thrift:"4,required" json:"writeToWAL"`
}

type TCell struct {
	Value     []byte `thrift:"1,required" json:"value"`
	Timestamp int64  `thrift:"2,required" json:"timestamp"`
}

type TIncrement struct {
	Table   []byte `thrift:"1,required" json:"table"`
	Row     []byte `thrift:"2,required" json:"row"`
	Column  []byte `thrift:"3,required" json:"column"`
	Ammount int64  `thrift:"4,required" json:"ammount"`
}

type TRegionInfo struct {
	StartKey   []byte `thrift:"1,required" json:"startKey"`
	EndKey     []byte `thrift:"2,required" json:"endKey"`
	Id         int64  `thrift:"3,required" json:"id"`
	Name       []byte `thrift:"4,required" json:"name"`
	Version    byte   `thrift:"5,required" json:"version"`
	ServerName []byte `thrift:"6,required" json:"serverName"`
	Port       int32  `thrift:"7,required" json:"port"`
}

type TRowResult struct {
	Row     []byte            `thrift:"1,required" json:"row"`
	Columns map[string]*TCell `thrift:"2,required" json:"columns"`
}

type TScan struct {
	StartRow     []byte   `thrift:"1" json:"startRow"`
	StopRow      []byte   `thrift:"2" json:"stopRow"`
	Timestamp    int64    `thrift:"3" json:"timestamp"`
	Columns      [][]byte `thrift:"4" json:"columns"`
	Caching      int32    `thrift:"5" json:"caching"`
	FilterString []byte   `thrift:"6" json:"filterString"`
}

type AlreadyExists struct {
	Message string `thrift:"1,required" json:"message"`
}

func (e *AlreadyExists) Error() string {
	return fmt.Sprintf("AlreadyExists{Message: %+v}", e.Message)
}

type IOError struct {
	Message string `thrift:"1,required" json:"message"`
}

func (e *IOError) Error() string {
	return fmt.Sprintf("IOError{Message: %+v}", e.Message)
}

type IllegalArgument struct {
	Message string `thrift:"1,required" json:"message"`
}

func (e *IllegalArgument) Error() string {
	return fmt.Sprintf("IllegalArgument{Message: %+v}", e.Message)
}

type RPCClient interface {
	Call(method string, request interface{}, response interface{}) error
}

type Hbase interface {
	AtomicIncrement(TableName []byte, Row []byte, Column []byte, Value int64) (int64, error)
	Compact(TableNameOrRegionName []byte) error
	CreateTable(TableName []byte, ColumnFamilies []*ColumnDescriptor) error
	DeleteAll(TableName []byte, Row []byte, Column []byte, Attributes map[string][]byte) error
	DeleteAllRow(TableName []byte, Row []byte, Attributes map[string][]byte) error
	DeleteAllRowTs(TableName []byte, Row []byte, Timestamp int64, Attributes map[string][]byte) error
	DeleteAllTs(TableName []byte, Row []byte, Column []byte, Timestamp int64, Attributes map[string][]byte) error
	DeleteTable(TableName []byte) error
	DisableTable(TableName []byte) error
	EnableTable(TableName []byte) error
	Get(TableName []byte, Row []byte, Column []byte, Attributes map[string][]byte) ([]*TCell, error)
	GetColumnDescriptors(TableName []byte) (map[string]*ColumnDescriptor, error)
	GetRegionInfo(Row []byte) (*TRegionInfo, error)
	GetRow(TableName []byte, Row []byte, Attributes map[string][]byte) ([]*TRowResult, error)
	GetRowOrBefore(TableName []byte, Row []byte, Family []byte) ([]*TCell, error)
	GetRowTs(TableName []byte, Row []byte, Timestamp int64, Attributes map[string][]byte) ([]*TRowResult, error)
	GetRowWithColumns(TableName []byte, Row []byte, Columns [][]byte, Attributes map[string][]byte) ([]*TRowResult, error)
	GetRowWithColumnsTs(TableName []byte, Row []byte, Columns [][]byte, Timestamp int64, Attributes map[string][]byte) ([]*TRowResult, error)
	GetRows(TableName []byte, Rows [][]byte, Attributes map[string][]byte) ([]*TRowResult, error)
	GetRowsTs(TableName []byte, Rows [][]byte, Timestamp int64, Attributes map[string][]byte) ([]*TRowResult, error)
	GetRowsWithColumns(TableName []byte, Rows [][]byte, Columns [][]byte, Attributes map[string][]byte) ([]*TRowResult, error)
	GetRowsWithColumnsTs(TableName []byte, Rows [][]byte, Columns [][]byte, Timestamp int64, Attributes map[string][]byte) ([]*TRowResult, error)
	GetTableNames() ([][]byte, error)
	GetTableRegions(TableName []byte) ([]*TRegionInfo, error)
	GetVer(TableName []byte, Row []byte, Column []byte, NumVersions int32, Attributes map[string][]byte) ([]*TCell, error)
	GetVerTs(TableName []byte, Row []byte, Column []byte, Timestamp int64, NumVersions int32, Attributes map[string][]byte) ([]*TCell, error)
	Increment(Increment *TIncrement) error
	IncrementRows(Increments []*TIncrement) error
	IsTableEnabled(TableName []byte) (bool, error)
	MajorCompact(TableNameOrRegionName []byte) error
	MutateRow(TableName []byte, Row []byte, Mutations []*Mutation, Attributes map[string][]byte) error
	MutateRowTs(TableName []byte, Row []byte, Mutations []*Mutation, Timestamp int64, Attributes map[string][]byte) error
	MutateRows(TableName []byte, RowBatches []*BatchMutation, Attributes map[string][]byte) error
	MutateRowsTs(TableName []byte, RowBatches []*BatchMutation, Timestamp int64, Attributes map[string][]byte) error
	ScannerClose(Id int32) error
	ScannerGet(Id int32) ([]*TRowResult, error)
	ScannerGetList(Id int32, NbRows int32) ([]*TRowResult, error)
	ScannerOpen(TableName []byte, StartRow []byte, Columns [][]byte, Attributes map[string][]byte) (int32, error)
	ScannerOpenTs(TableName []byte, StartRow []byte, Columns [][]byte, Timestamp int64, Attributes map[string][]byte) (int32, error)
	ScannerOpenWithPrefix(TableName []byte, StartAndPrefix []byte, Columns [][]byte, Attributes map[string][]byte) (int32, error)
	ScannerOpenWithScan(TableName []byte, Scan *TScan, Attributes map[string][]byte) (int32, error)
	ScannerOpenWithStop(TableName []byte, StartRow []byte, StopRow []byte, Columns [][]byte, Attributes map[string][]byte) (int32, error)
	ScannerOpenWithStopTs(TableName []byte, StartRow []byte, StopRow []byte, Columns [][]byte, Timestamp int64, Attributes map[string][]byte) (int32, error)
}

type HbaseServer struct {
	Implementation Hbase
}

func (s *HbaseServer) AtomicIncrement(req *HbaseAtomicIncrementRequest, res *HbaseAtomicIncrementResponse) error {
	val, err := s.Implementation.AtomicIncrement(req.TableName, req.Row, req.Column, req.Value)
	switch e := err.(type) {
	case *IOError:
		res.Io = e
		err = nil
	case *IllegalArgument:
		res.Ia = e
		err = nil
	}
	res.Value = val
	return err
}

func (s *HbaseServer) Compact(req *HbaseCompactRequest, res *HbaseCompactResponse) error {
	err := s.Implementation.Compact(req.TableNameOrRegionName)
	switch e := err.(type) {
	case *IOError:
		res.Io = e
		err = nil
	}
	return err
}

func (s *HbaseServer) CreateTable(req *HbaseCreateTableRequest, res *HbaseCreateTableResponse) error {
	err := s.Implementation.CreateTable(req.TableName, req.ColumnFamilies)
	switch e := err.(type) {
	case *IOError:
		res.Io = e
		err = nil
	case *IllegalArgument:
		res.Ia = e
		err = nil
	case *AlreadyExists:
		res.Exist = e
		err = nil
	}
	return err
}

func (s *HbaseServer) DeleteAll(req *HbaseDeleteAllRequest, res *HbaseDeleteAllResponse) error {
	err := s.Implementation.DeleteAll(req.TableName, req.Row, req.Column, req.Attributes)
	switch e := err.(type) {
	case *IOError:
		res.Io = e
		err = nil
	}
	return err
}

func (s *HbaseServer) DeleteAllRow(req *HbaseDeleteAllRowRequest, res *HbaseDeleteAllRowResponse) error {
	err := s.Implementation.DeleteAllRow(req.TableName, req.Row, req.Attributes)
	switch e := err.(type) {
	case *IOError:
		res.Io = e
		err = nil
	}
	return err
}

func (s *HbaseServer) DeleteAllRowTs(req *HbaseDeleteAllRowTsRequest, res *HbaseDeleteAllRowTsResponse) error {
	err := s.Implementation.DeleteAllRowTs(req.TableName, req.Row, req.Timestamp, req.Attributes)
	switch e := err.(type) {
	case *IOError:
		res.Io = e
		err = nil
	}
	return err
}

func (s *HbaseServer) DeleteAllTs(req *HbaseDeleteAllTsRequest, res *HbaseDeleteAllTsResponse) error {
	err := s.Implementation.DeleteAllTs(req.TableName, req.Row, req.Column, req.Timestamp, req.Attributes)
	switch e := err.(type) {
	case *IOError:
		res.Io = e
		err = nil
	}
	return err
}

func (s *HbaseServer) DeleteTable(req *HbaseDeleteTableRequest, res *HbaseDeleteTableResponse) error {
	err := s.Implementation.DeleteTable(req.TableName)
	switch e := err.(type) {
	case *IOError:
		res.Io = e
		err = nil
	}
	return err
}

func (s *HbaseServer) DisableTable(req *HbaseDisableTableRequest, res *HbaseDisableTableResponse) error {
	err := s.Implementation.DisableTable(req.TableName)
	switch e := err.(type) {
	case *IOError:
		res.Io = e
		err = nil
	}
	return err
}

func (s *HbaseServer) EnableTable(req *HbaseEnableTableRequest, res *HbaseEnableTableResponse) error {
	err := s.Implementation.EnableTable(req.TableName)
	switch e := err.(type) {
	case *IOError:
		res.Io = e
		err = nil
	}
	return err
}

func (s *HbaseServer) Get(req *HbaseGetRequest, res *HbaseGetResponse) error {
	val, err := s.Implementation.Get(req.TableName, req.Row, req.Column, req.Attributes)
	switch e := err.(type) {
	case *IOError:
		res.Io = e
		err = nil
	}
	res.Value = val
	return err
}

func (s *HbaseServer) GetColumnDescriptors(req *HbaseGetColumnDescriptorsRequest, res *HbaseGetColumnDescriptorsResponse) error {
	val, err := s.Implementation.GetColumnDescriptors(req.TableName)
	switch e := err.(type) {
	case *IOError:
		res.Io = e
		err = nil
	}
	res.Value = val
	return err
}

func (s *HbaseServer) GetRegionInfo(req *HbaseGetRegionInfoRequest, res *HbaseGetRegionInfoResponse) error {
	val, err := s.Implementation.GetRegionInfo(req.Row)
	switch e := err.(type) {
	case *IOError:
		res.Io = e
		err = nil
	}
	res.Value = val
	return err
}

func (s *HbaseServer) GetRow(req *HbaseGetRowRequest, res *HbaseGetRowResponse) error {
	val, err := s.Implementation.GetRow(req.TableName, req.Row, req.Attributes)
	switch e := err.(type) {
	case *IOError:
		res.Io = e
		err = nil
	}
	res.Value = val
	return err
}

func (s *HbaseServer) GetRowOrBefore(req *HbaseGetRowOrBeforeRequest, res *HbaseGetRowOrBeforeResponse) error {
	val, err := s.Implementation.GetRowOrBefore(req.TableName, req.Row, req.Family)
	switch e := err.(type) {
	case *IOError:
		res.Io = e
		err = nil
	}
	res.Value = val
	return err
}

func (s *HbaseServer) GetRowTs(req *HbaseGetRowTsRequest, res *HbaseGetRowTsResponse) error {
	val, err := s.Implementation.GetRowTs(req.TableName, req.Row, req.Timestamp, req.Attributes)
	switch e := err.(type) {
	case *IOError:
		res.Io = e
		err = nil
	}
	res.Value = val
	return err
}

func (s *HbaseServer) GetRowWithColumns(req *HbaseGetRowWithColumnsRequest, res *HbaseGetRowWithColumnsResponse) error {
	val, err := s.Implementation.GetRowWithColumns(req.TableName, req.Row, req.Columns, req.Attributes)
	switch e := err.(type) {
	case *IOError:
		res.Io = e
		err = nil
	}
	res.Value = val
	return err
}

func (s *HbaseServer) GetRowWithColumnsTs(req *HbaseGetRowWithColumnsTsRequest, res *HbaseGetRowWithColumnsTsResponse) error {
	val, err := s.Implementation.GetRowWithColumnsTs(req.TableName, req.Row, req.Columns, req.Timestamp, req.Attributes)
	switch e := err.(type) {
	case *IOError:
		res.Io = e
		err = nil
	}
	res.Value = val
	return err
}

func (s *HbaseServer) GetRows(req *HbaseGetRowsRequest, res *HbaseGetRowsResponse) error {
	val, err := s.Implementation.GetRows(req.TableName, req.Rows, req.Attributes)
	switch e := err.(type) {
	case *IOError:
		res.Io = e
		err = nil
	}
	res.Value = val
	return err
}

func (s *HbaseServer) GetRowsTs(req *HbaseGetRowsTsRequest, res *HbaseGetRowsTsResponse) error {
	val, err := s.Implementation.GetRowsTs(req.TableName, req.Rows, req.Timestamp, req.Attributes)
	switch e := err.(type) {
	case *IOError:
		res.Io = e
		err = nil
	}
	res.Value = val
	return err
}

func (s *HbaseServer) GetRowsWithColumns(req *HbaseGetRowsWithColumnsRequest, res *HbaseGetRowsWithColumnsResponse) error {
	val, err := s.Implementation.GetRowsWithColumns(req.TableName, req.Rows, req.Columns, req.Attributes)
	switch e := err.(type) {
	case *IOError:
		res.Io = e
		err = nil
	}
	res.Value = val
	return err
}

func (s *HbaseServer) GetRowsWithColumnsTs(req *HbaseGetRowsWithColumnsTsRequest, res *HbaseGetRowsWithColumnsTsResponse) error {
	val, err := s.Implementation.GetRowsWithColumnsTs(req.TableName, req.Rows, req.Columns, req.Timestamp, req.Attributes)
	switch e := err.(type) {
	case *IOError:
		res.Io = e
		err = nil
	}
	res.Value = val
	return err
}

func (s *HbaseServer) GetTableNames(req *HbaseGetTableNamesRequest, res *HbaseGetTableNamesResponse) error {
	val, err := s.Implementation.GetTableNames()
	switch e := err.(type) {
	case *IOError:
		res.Io = e
		err = nil
	}
	res.Value = val
	return err
}

func (s *HbaseServer) GetTableRegions(req *HbaseGetTableRegionsRequest, res *HbaseGetTableRegionsResponse) error {
	val, err := s.Implementation.GetTableRegions(req.TableName)
	switch e := err.(type) {
	case *IOError:
		res.Io = e
		err = nil
	}
	res.Value = val
	return err
}

func (s *HbaseServer) GetVer(req *HbaseGetVerRequest, res *HbaseGetVerResponse) error {
	val, err := s.Implementation.GetVer(req.TableName, req.Row, req.Column, req.NumVersions, req.Attributes)
	switch e := err.(type) {
	case *IOError:
		res.Io = e
		err = nil
	}
	res.Value = val
	return err
}

func (s *HbaseServer) GetVerTs(req *HbaseGetVerTsRequest, res *HbaseGetVerTsResponse) error {
	val, err := s.Implementation.GetVerTs(req.TableName, req.Row, req.Column, req.Timestamp, req.NumVersions, req.Attributes)
	switch e := err.(type) {
	case *IOError:
		res.Io = e
		err = nil
	}
	res.Value = val
	return err
}

func (s *HbaseServer) Increment(req *HbaseIncrementRequest, res *HbaseIncrementResponse) error {
	err := s.Implementation.Increment(req.Increment)
	switch e := err.(type) {
	case *IOError:
		res.Io = e
		err = nil
	}
	return err
}

func (s *HbaseServer) IncrementRows(req *HbaseIncrementRowsRequest, res *HbaseIncrementRowsResponse) error {
	err := s.Implementation.IncrementRows(req.Increments)
	switch e := err.(type) {
	case *IOError:
		res.Io = e
		err = nil
	}
	return err
}

func (s *HbaseServer) IsTableEnabled(req *HbaseIsTableEnabledRequest, res *HbaseIsTableEnabledResponse) error {
	val, err := s.Implementation.IsTableEnabled(req.TableName)
	switch e := err.(type) {
	case *IOError:
		res.Io = e
		err = nil
	}
	res.Value = val
	return err
}

func (s *HbaseServer) MajorCompact(req *HbaseMajorCompactRequest, res *HbaseMajorCompactResponse) error {
	err := s.Implementation.MajorCompact(req.TableNameOrRegionName)
	switch e := err.(type) {
	case *IOError:
		res.Io = e
		err = nil
	}
	return err
}

func (s *HbaseServer) MutateRow(req *HbaseMutateRowRequest, res *HbaseMutateRowResponse) error {
	err := s.Implementation.MutateRow(req.TableName, req.Row, req.Mutations, req.Attributes)
	switch e := err.(type) {
	case *IOError:
		res.Io = e
		err = nil
	case *IllegalArgument:
		res.Ia = e
		err = nil
	}
	return err
}

func (s *HbaseServer) MutateRowTs(req *HbaseMutateRowTsRequest, res *HbaseMutateRowTsResponse) error {
	err := s.Implementation.MutateRowTs(req.TableName, req.Row, req.Mutations, req.Timestamp, req.Attributes)
	switch e := err.(type) {
	case *IOError:
		res.Io = e
		err = nil
	case *IllegalArgument:
		res.Ia = e
		err = nil
	}
	return err
}

func (s *HbaseServer) MutateRows(req *HbaseMutateRowsRequest, res *HbaseMutateRowsResponse) error {
	err := s.Implementation.MutateRows(req.TableName, req.RowBatches, req.Attributes)
	switch e := err.(type) {
	case *IOError:
		res.Io = e
		err = nil
	case *IllegalArgument:
		res.Ia = e
		err = nil
	}
	return err
}

func (s *HbaseServer) MutateRowsTs(req *HbaseMutateRowsTsRequest, res *HbaseMutateRowsTsResponse) error {
	err := s.Implementation.MutateRowsTs(req.TableName, req.RowBatches, req.Timestamp, req.Attributes)
	switch e := err.(type) {
	case *IOError:
		res.Io = e
		err = nil
	case *IllegalArgument:
		res.Ia = e
		err = nil
	}
	return err
}

func (s *HbaseServer) ScannerClose(req *HbaseScannerCloseRequest, res *HbaseScannerCloseResponse) error {
	err := s.Implementation.ScannerClose(req.Id)
	switch e := err.(type) {
	case *IOError:
		res.Io = e
		err = nil
	case *IllegalArgument:
		res.Ia = e
		err = nil
	}
	return err
}

func (s *HbaseServer) ScannerGet(req *HbaseScannerGetRequest, res *HbaseScannerGetResponse) error {
	val, err := s.Implementation.ScannerGet(req.Id)
	switch e := err.(type) {
	case *IOError:
		res.Io = e
		err = nil
	case *IllegalArgument:
		res.Ia = e
		err = nil
	}
	res.Value = val
	return err
}

func (s *HbaseServer) ScannerGetList(req *HbaseScannerGetListRequest, res *HbaseScannerGetListResponse) error {
	val, err := s.Implementation.ScannerGetList(req.Id, req.NbRows)
	switch e := err.(type) {
	case *IOError:
		res.Io = e
		err = nil
	case *IllegalArgument:
		res.Ia = e
		err = nil
	}
	res.Value = val
	return err
}

func (s *HbaseServer) ScannerOpen(req *HbaseScannerOpenRequest, res *HbaseScannerOpenResponse) error {
	val, err := s.Implementation.ScannerOpen(req.TableName, req.StartRow, req.Columns, req.Attributes)
	switch e := err.(type) {
	case *IOError:
		res.Io = e
		err = nil
	}
	res.Value = val
	return err
}

func (s *HbaseServer) ScannerOpenTs(req *HbaseScannerOpenTsRequest, res *HbaseScannerOpenTsResponse) error {
	val, err := s.Implementation.ScannerOpenTs(req.TableName, req.StartRow, req.Columns, req.Timestamp, req.Attributes)
	switch e := err.(type) {
	case *IOError:
		res.Io = e
		err = nil
	}
	res.Value = val
	return err
}

func (s *HbaseServer) ScannerOpenWithPrefix(req *HbaseScannerOpenWithPrefixRequest, res *HbaseScannerOpenWithPrefixResponse) error {
	val, err := s.Implementation.ScannerOpenWithPrefix(req.TableName, req.StartAndPrefix, req.Columns, req.Attributes)
	switch e := err.(type) {
	case *IOError:
		res.Io = e
		err = nil
	}
	res.Value = val
	return err
}

func (s *HbaseServer) ScannerOpenWithScan(req *HbaseScannerOpenWithScanRequest, res *HbaseScannerOpenWithScanResponse) error {
	val, err := s.Implementation.ScannerOpenWithScan(req.TableName, req.Scan, req.Attributes)
	switch e := err.(type) {
	case *IOError:
		res.Io = e
		err = nil
	}
	res.Value = val
	return err
}

func (s *HbaseServer) ScannerOpenWithStop(req *HbaseScannerOpenWithStopRequest, res *HbaseScannerOpenWithStopResponse) error {
	val, err := s.Implementation.ScannerOpenWithStop(req.TableName, req.StartRow, req.StopRow, req.Columns, req.Attributes)
	switch e := err.(type) {
	case *IOError:
		res.Io = e
		err = nil
	}
	res.Value = val
	return err
}

func (s *HbaseServer) ScannerOpenWithStopTs(req *HbaseScannerOpenWithStopTsRequest, res *HbaseScannerOpenWithStopTsResponse) error {
	val, err := s.Implementation.ScannerOpenWithStopTs(req.TableName, req.StartRow, req.StopRow, req.Columns, req.Timestamp, req.Attributes)
	switch e := err.(type) {
	case *IOError:
		res.Io = e
		err = nil
	}
	res.Value = val
	return err
}

type HbaseAtomicIncrementRequest struct {
	TableName []byte `thrift:"1,required" json:"tableName"`
	Row       []byte `thrift:"2,required" json:"row"`
	Column    []byte `thrift:"3,required" json:"column"`
	Value     int64  `thrift:"4,required" json:"value"`
}

type HbaseAtomicIncrementResponse struct {
	Value int64            `thrift:"0" json:"value"`
	Io    *IOError         `thrift:"1" json:"io"`
	Ia    *IllegalArgument `thrift:"2" json:"ia"`
}

type HbaseCompactRequest struct {
	TableNameOrRegionName []byte `thrift:"1,required" json:"tableNameOrRegionName"`
}

type HbaseCompactResponse struct {
	Io *IOError `thrift:"1" json:"io"`
}

type HbaseCreateTableRequest struct {
	TableName      []byte              `thrift:"1,required" json:"tableName"`
	ColumnFamilies []*ColumnDescriptor `thrift:"2,required" json:"columnFamilies"`
}

type HbaseCreateTableResponse struct {
	Io    *IOError         `thrift:"1" json:"io"`
	Ia    *IllegalArgument `thrift:"2" json:"ia"`
	Exist *AlreadyExists   `thrift:"3" json:"exist"`
}

type HbaseDeleteAllRequest struct {
	TableName  []byte            `thrift:"1,required" json:"tableName"`
	Row        []byte            `thrift:"2,required" json:"row"`
	Column     []byte            `thrift:"3,required" json:"column"`
	Attributes map[string][]byte `thrift:"4,required" json:"attributes"`
}

type HbaseDeleteAllResponse struct {
	Io *IOError `thrift:"1" json:"io"`
}

type HbaseDeleteAllRowRequest struct {
	TableName  []byte            `thrift:"1,required" json:"tableName"`
	Row        []byte            `thrift:"2,required" json:"row"`
	Attributes map[string][]byte `thrift:"3,required" json:"attributes"`
}

type HbaseDeleteAllRowResponse struct {
	Io *IOError `thrift:"1" json:"io"`
}

type HbaseDeleteAllRowTsRequest struct {
	TableName  []byte            `thrift:"1,required" json:"tableName"`
	Row        []byte            `thrift:"2,required" json:"row"`
	Timestamp  int64             `thrift:"3,required" json:"timestamp"`
	Attributes map[string][]byte `thrift:"4,required" json:"attributes"`
}

type HbaseDeleteAllRowTsResponse struct {
	Io *IOError `thrift:"1" json:"io"`
}

type HbaseDeleteAllTsRequest struct {
	TableName  []byte            `thrift:"1,required" json:"tableName"`
	Row        []byte            `thrift:"2,required" json:"row"`
	Column     []byte            `thrift:"3,required" json:"column"`
	Timestamp  int64             `thrift:"4,required" json:"timestamp"`
	Attributes map[string][]byte `thrift:"5,required" json:"attributes"`
}

type HbaseDeleteAllTsResponse struct {
	Io *IOError `thrift:"1" json:"io"`
}

type HbaseDeleteTableRequest struct {
	TableName []byte `thrift:"1,required" json:"tableName"`
}

type HbaseDeleteTableResponse struct {
	Io *IOError `thrift:"1" json:"io"`
}

type HbaseDisableTableRequest struct {
	TableName []byte `thrift:"1,required" json:"tableName"`
}

type HbaseDisableTableResponse struct {
	Io *IOError `thrift:"1" json:"io"`
}

type HbaseEnableTableRequest struct {
	TableName []byte `thrift:"1,required" json:"tableName"`
}

type HbaseEnableTableResponse struct {
	Io *IOError `thrift:"1" json:"io"`
}

type HbaseGetRequest struct {
	TableName  []byte            `thrift:"1,required" json:"tableName"`
	Row        []byte            `thrift:"2,required" json:"row"`
	Column     []byte            `thrift:"3,required" json:"column"`
	Attributes map[string][]byte `thrift:"4,required" json:"attributes"`
}

type HbaseGetResponse struct {
	Value []*TCell `thrift:"0" json:"value"`
	Io    *IOError `thrift:"1" json:"io"`
}

type HbaseGetColumnDescriptorsRequest struct {
	TableName []byte `thrift:"1,required" json:"tableName"`
}

type HbaseGetColumnDescriptorsResponse struct {
	Value map[string]*ColumnDescriptor `thrift:"0" json:"value"`
	Io    *IOError                     `thrift:"1" json:"io"`
}

type HbaseGetRegionInfoRequest struct {
	Row []byte `thrift:"1,required" json:"row"`
}

type HbaseGetRegionInfoResponse struct {
	Value *TRegionInfo `thrift:"0" json:"value"`
	Io    *IOError     `thrift:"1" json:"io"`
}

type HbaseGetRowRequest struct {
	TableName  []byte            `thrift:"1,required" json:"tableName"`
	Row        []byte            `thrift:"2,required" json:"row"`
	Attributes map[string][]byte `thrift:"3,required" json:"attributes"`
}

type HbaseGetRowResponse struct {
	Value []*TRowResult `thrift:"0" json:"value"`
	Io    *IOError      `thrift:"1" json:"io"`
}

type HbaseGetRowOrBeforeRequest struct {
	TableName []byte `thrift:"1,required" json:"tableName"`
	Row       []byte `thrift:"2,required" json:"row"`
	Family    []byte `thrift:"3,required" json:"family"`
}

type HbaseGetRowOrBeforeResponse struct {
	Value []*TCell `thrift:"0" json:"value"`
	Io    *IOError `thrift:"1" json:"io"`
}

type HbaseGetRowTsRequest struct {
	TableName  []byte            `thrift:"1,required" json:"tableName"`
	Row        []byte            `thrift:"2,required" json:"row"`
	Timestamp  int64             `thrift:"3,required" json:"timestamp"`
	Attributes map[string][]byte `thrift:"4,required" json:"attributes"`
}

type HbaseGetRowTsResponse struct {
	Value []*TRowResult `thrift:"0" json:"value"`
	Io    *IOError      `thrift:"1" json:"io"`
}

type HbaseGetRowWithColumnsRequest struct {
	TableName  []byte            `thrift:"1,required" json:"tableName"`
	Row        []byte            `thrift:"2,required" json:"row"`
	Columns    [][]byte          `thrift:"3,required" json:"columns"`
	Attributes map[string][]byte `thrift:"4,required" json:"attributes"`
}

type HbaseGetRowWithColumnsResponse struct {
	Value []*TRowResult `thrift:"0" json:"value"`
	Io    *IOError      `thrift:"1" json:"io"`
}

type HbaseGetRowWithColumnsTsRequest struct {
	TableName  []byte            `thrift:"1,required" json:"tableName"`
	Row        []byte            `thrift:"2,required" json:"row"`
	Columns    [][]byte          `thrift:"3,required" json:"columns"`
	Timestamp  int64             `thrift:"4,required" json:"timestamp"`
	Attributes map[string][]byte `thrift:"5,required" json:"attributes"`
}

type HbaseGetRowWithColumnsTsResponse struct {
	Value []*TRowResult `thrift:"0" json:"value"`
	Io    *IOError      `thrift:"1" json:"io"`
}

type HbaseGetRowsRequest struct {
	TableName  []byte            `thrift:"1,required" json:"tableName"`
	Rows       [][]byte          `thrift:"2,required" json:"rows"`
	Attributes map[string][]byte `thrift:"3,required" json:"attributes"`
}

type HbaseGetRowsResponse struct {
	Value []*TRowResult `thrift:"0" json:"value"`
	Io    *IOError      `thrift:"1" json:"io"`
}

type HbaseGetRowsTsRequest struct {
	TableName  []byte            `thrift:"1,required" json:"tableName"`
	Rows       [][]byte          `thrift:"2,required" json:"rows"`
	Timestamp  int64             `thrift:"3,required" json:"timestamp"`
	Attributes map[string][]byte `thrift:"4,required" json:"attributes"`
}

type HbaseGetRowsTsResponse struct {
	Value []*TRowResult `thrift:"0" json:"value"`
	Io    *IOError      `thrift:"1" json:"io"`
}

type HbaseGetRowsWithColumnsRequest struct {
	TableName  []byte            `thrift:"1,required" json:"tableName"`
	Rows       [][]byte          `thrift:"2,required" json:"rows"`
	Columns    [][]byte          `thrift:"3,required" json:"columns"`
	Attributes map[string][]byte `thrift:"4,required" json:"attributes"`
}

type HbaseGetRowsWithColumnsResponse struct {
	Value []*TRowResult `thrift:"0" json:"value"`
	Io    *IOError      `thrift:"1" json:"io"`
}

type HbaseGetRowsWithColumnsTsRequest struct {
	TableName  []byte            `thrift:"1,required" json:"tableName"`
	Rows       [][]byte          `thrift:"2,required" json:"rows"`
	Columns    [][]byte          `thrift:"3,required" json:"columns"`
	Timestamp  int64             `thrift:"4,required" json:"timestamp"`
	Attributes map[string][]byte `thrift:"5,required" json:"attributes"`
}

type HbaseGetRowsWithColumnsTsResponse struct {
	Value []*TRowResult `thrift:"0" json:"value"`
	Io    *IOError      `thrift:"1" json:"io"`
}

type HbaseGetTableNamesRequest struct {
}

type HbaseGetTableNamesResponse struct {
	Value [][]byte `thrift:"0" json:"value"`
	Io    *IOError `thrift:"1" json:"io"`
}

type HbaseGetTableRegionsRequest struct {
	TableName []byte `thrift:"1,required" json:"tableName"`
}

type HbaseGetTableRegionsResponse struct {
	Value []*TRegionInfo `thrift:"0" json:"value"`
	Io    *IOError       `thrift:"1" json:"io"`
}

type HbaseGetVerRequest struct {
	TableName   []byte            `thrift:"1,required" json:"tableName"`
	Row         []byte            `thrift:"2,required" json:"row"`
	Column      []byte            `thrift:"3,required" json:"column"`
	NumVersions int32             `thrift:"4,required" json:"numVersions"`
	Attributes  map[string][]byte `thrift:"5,required" json:"attributes"`
}

type HbaseGetVerResponse struct {
	Value []*TCell `thrift:"0" json:"value"`
	Io    *IOError `thrift:"1" json:"io"`
}

type HbaseGetVerTsRequest struct {
	TableName   []byte            `thrift:"1,required" json:"tableName"`
	Row         []byte            `thrift:"2,required" json:"row"`
	Column      []byte            `thrift:"3,required" json:"column"`
	Timestamp   int64             `thrift:"4,required" json:"timestamp"`
	NumVersions int32             `thrift:"5,required" json:"numVersions"`
	Attributes  map[string][]byte `thrift:"6,required" json:"attributes"`
}

type HbaseGetVerTsResponse struct {
	Value []*TCell `thrift:"0" json:"value"`
	Io    *IOError `thrift:"1" json:"io"`
}

type HbaseIncrementRequest struct {
	Increment *TIncrement `thrift:"1,required" json:"increment"`
}

type HbaseIncrementResponse struct {
	Io *IOError `thrift:"1" json:"io"`
}

type HbaseIncrementRowsRequest struct {
	Increments []*TIncrement `thrift:"1,required" json:"increments"`
}

type HbaseIncrementRowsResponse struct {
	Io *IOError `thrift:"1" json:"io"`
}

type HbaseIsTableEnabledRequest struct {
	TableName []byte `thrift:"1,required" json:"tableName"`
}

type HbaseIsTableEnabledResponse struct {
	Value bool     `thrift:"0" json:"value"`
	Io    *IOError `thrift:"1" json:"io"`
}

type HbaseMajorCompactRequest struct {
	TableNameOrRegionName []byte `thrift:"1,required" json:"tableNameOrRegionName"`
}

type HbaseMajorCompactResponse struct {
	Io *IOError `thrift:"1" json:"io"`
}

type HbaseMutateRowRequest struct {
	TableName  []byte            `thrift:"1,required" json:"tableName"`
	Row        []byte            `thrift:"2,required" json:"row"`
	Mutations  []*Mutation       `thrift:"3,required" json:"mutations"`
	Attributes map[string][]byte `thrift:"4,required" json:"attributes"`
}

type HbaseMutateRowResponse struct {
	Io *IOError         `thrift:"1" json:"io"`
	Ia *IllegalArgument `thrift:"2" json:"ia"`
}

type HbaseMutateRowTsRequest struct {
	TableName  []byte            `thrift:"1,required" json:"tableName"`
	Row        []byte            `thrift:"2,required" json:"row"`
	Mutations  []*Mutation       `thrift:"3,required" json:"mutations"`
	Timestamp  int64             `thrift:"4,required" json:"timestamp"`
	Attributes map[string][]byte `thrift:"5,required" json:"attributes"`
}

type HbaseMutateRowTsResponse struct {
	Io *IOError         `thrift:"1" json:"io"`
	Ia *IllegalArgument `thrift:"2" json:"ia"`
}

type HbaseMutateRowsRequest struct {
	TableName  []byte            `thrift:"1,required" json:"tableName"`
	RowBatches []*BatchMutation  `thrift:"2,required" json:"rowBatches"`
	Attributes map[string][]byte `thrift:"3,required" json:"attributes"`
}

type HbaseMutateRowsResponse struct {
	Io *IOError         `thrift:"1" json:"io"`
	Ia *IllegalArgument `thrift:"2" json:"ia"`
}

type HbaseMutateRowsTsRequest struct {
	TableName  []byte            `thrift:"1,required" json:"tableName"`
	RowBatches []*BatchMutation  `thrift:"2,required" json:"rowBatches"`
	Timestamp  int64             `thrift:"3,required" json:"timestamp"`
	Attributes map[string][]byte `thrift:"4,required" json:"attributes"`
}

type HbaseMutateRowsTsResponse struct {
	Io *IOError         `thrift:"1" json:"io"`
	Ia *IllegalArgument `thrift:"2" json:"ia"`
}

type HbaseScannerCloseRequest struct {
	Id int32 `thrift:"1,required" json:"id"`
}

type HbaseScannerCloseResponse struct {
	Io *IOError         `thrift:"1" json:"io"`
	Ia *IllegalArgument `thrift:"2" json:"ia"`
}

type HbaseScannerGetRequest struct {
	Id int32 `thrift:"1,required" json:"id"`
}

type HbaseScannerGetResponse struct {
	Value []*TRowResult    `thrift:"0" json:"value"`
	Io    *IOError         `thrift:"1" json:"io"`
	Ia    *IllegalArgument `thrift:"2" json:"ia"`
}

type HbaseScannerGetListRequest struct {
	Id     int32 `thrift:"1,required" json:"id"`
	NbRows int32 `thrift:"2,required" json:"nbRows"`
}

type HbaseScannerGetListResponse struct {
	Value []*TRowResult    `thrift:"0" json:"value"`
	Io    *IOError         `thrift:"1" json:"io"`
	Ia    *IllegalArgument `thrift:"2" json:"ia"`
}

type HbaseScannerOpenRequest struct {
	TableName  []byte            `thrift:"1,required" json:"tableName"`
	StartRow   []byte            `thrift:"2,required" json:"startRow"`
	Columns    [][]byte          `thrift:"3,required" json:"columns"`
	Attributes map[string][]byte `thrift:"4,required" json:"attributes"`
}

type HbaseScannerOpenResponse struct {
	Value int32    `thrift:"0" json:"value"`
	Io    *IOError `thrift:"1" json:"io"`
}

type HbaseScannerOpenTsRequest struct {
	TableName  []byte            `thrift:"1,required" json:"tableName"`
	StartRow   []byte            `thrift:"2,required" json:"startRow"`
	Columns    [][]byte          `thrift:"3,required" json:"columns"`
	Timestamp  int64             `thrift:"4,required" json:"timestamp"`
	Attributes map[string][]byte `thrift:"5,required" json:"attributes"`
}

type HbaseScannerOpenTsResponse struct {
	Value int32    `thrift:"0" json:"value"`
	Io    *IOError `thrift:"1" json:"io"`
}

type HbaseScannerOpenWithPrefixRequest struct {
	TableName      []byte            `thrift:"1,required" json:"tableName"`
	StartAndPrefix []byte            `thrift:"2,required" json:"startAndPrefix"`
	Columns        [][]byte          `thrift:"3,required" json:"columns"`
	Attributes     map[string][]byte `thrift:"4,required" json:"attributes"`
}

type HbaseScannerOpenWithPrefixResponse struct {
	Value int32    `thrift:"0" json:"value"`
	Io    *IOError `thrift:"1" json:"io"`
}

type HbaseScannerOpenWithScanRequest struct {
	TableName  []byte            `thrift:"1,required" json:"tableName"`
	Scan       *TScan            `thrift:"2,required" json:"scan"`
	Attributes map[string][]byte `thrift:"3,required" json:"attributes"`
}

type HbaseScannerOpenWithScanResponse struct {
	Value int32    `thrift:"0" json:"value"`
	Io    *IOError `thrift:"1" json:"io"`
}

type HbaseScannerOpenWithStopRequest struct {
	TableName  []byte            `thrift:"1,required" json:"tableName"`
	StartRow   []byte            `thrift:"2,required" json:"startRow"`
	StopRow    []byte            `thrift:"3,required" json:"stopRow"`
	Columns    [][]byte          `thrift:"4,required" json:"columns"`
	Attributes map[string][]byte `thrift:"5,required" json:"attributes"`
}

type HbaseScannerOpenWithStopResponse struct {
	Value int32    `thrift:"0" json:"value"`
	Io    *IOError `thrift:"1" json:"io"`
}

type HbaseScannerOpenWithStopTsRequest struct {
	TableName  []byte            `thrift:"1,required" json:"tableName"`
	StartRow   []byte            `thrift:"2,required" json:"startRow"`
	StopRow    []byte            `thrift:"3,required" json:"stopRow"`
	Columns    [][]byte          `thrift:"4,required" json:"columns"`
	Timestamp  int64             `thrift:"5,required" json:"timestamp"`
	Attributes map[string][]byte `thrift:"6,required" json:"attributes"`
}

type HbaseScannerOpenWithStopTsResponse struct {
	Value int32    `thrift:"0" json:"value"`
	Io    *IOError `thrift:"1" json:"io"`
}

type HbaseClient struct {
	Client RPCClient
}

func (s *HbaseClient) AtomicIncrement(TableName []byte, Row []byte, Column []byte, Value int64) (int64, error) {
	req := &HbaseAtomicIncrementRequest{
		TableName: TableName,
		Row:       Row,
		Column:    Column,
		Value:     Value,
	}
	res := &HbaseAtomicIncrementResponse{}
	err := s.Client.Call("atomicIncrement", req, res)
	if err == nil {
		switch {
		case res.Io != nil:
			err = res.Io
		case res.Ia != nil:
			err = res.Ia
		}
	}
	return res.Value, err
}

func (s *HbaseClient) Compact(TableNameOrRegionName []byte) error {
	req := &HbaseCompactRequest{
		TableNameOrRegionName: TableNameOrRegionName,
	}
	res := &HbaseCompactResponse{}
	err := s.Client.Call("compact", req, res)
	if err == nil {
		switch {
		case res.Io != nil:
			err = res.Io
		}
	}
	return err
}

func (s *HbaseClient) CreateTable(TableName []byte, ColumnFamilies []*ColumnDescriptor) error {
	req := &HbaseCreateTableRequest{
		TableName:      TableName,
		ColumnFamilies: ColumnFamilies,
	}
	res := &HbaseCreateTableResponse{}
	err := s.Client.Call("createTable", req, res)
	if err == nil {
		switch {
		case res.Io != nil:
			err = res.Io
		case res.Ia != nil:
			err = res.Ia
		case res.Exist != nil:
			err = res.Exist
		}
	}
	return err
}

func (s *HbaseClient) DeleteAll(TableName []byte, Row []byte, Column []byte, Attributes map[string][]byte) error {
	req := &HbaseDeleteAllRequest{
		TableName:  TableName,
		Row:        Row,
		Column:     Column,
		Attributes: Attributes,
	}
	res := &HbaseDeleteAllResponse{}
	err := s.Client.Call("deleteAll", req, res)
	if err == nil {
		switch {
		case res.Io != nil:
			err = res.Io
		}
	}
	return err
}

func (s *HbaseClient) DeleteAllRow(TableName []byte, Row []byte, Attributes map[string][]byte) error {
	req := &HbaseDeleteAllRowRequest{
		TableName:  TableName,
		Row:        Row,
		Attributes: Attributes,
	}
	res := &HbaseDeleteAllRowResponse{}
	err := s.Client.Call("deleteAllRow", req, res)
	if err == nil {
		switch {
		case res.Io != nil:
			err = res.Io
		}
	}
	return err
}

func (s *HbaseClient) DeleteAllRowTs(TableName []byte, Row []byte, Timestamp int64, Attributes map[string][]byte) error {
	req := &HbaseDeleteAllRowTsRequest{
		TableName:  TableName,
		Row:        Row,
		Timestamp:  Timestamp,
		Attributes: Attributes,
	}
	res := &HbaseDeleteAllRowTsResponse{}
	err := s.Client.Call("deleteAllRowTs", req, res)
	if err == nil {
		switch {
		case res.Io != nil:
			err = res.Io
		}
	}
	return err
}

func (s *HbaseClient) DeleteAllTs(TableName []byte, Row []byte, Column []byte, Timestamp int64, Attributes map[string][]byte) error {
	req := &HbaseDeleteAllTsRequest{
		TableName:  TableName,
		Row:        Row,
		Column:     Column,
		Timestamp:  Timestamp,
		Attributes: Attributes,
	}
	res := &HbaseDeleteAllTsResponse{}
	err := s.Client.Call("deleteAllTs", req, res)
	if err == nil {
		switch {
		case res.Io != nil:
			err = res.Io
		}
	}
	return err
}

func (s *HbaseClient) DeleteTable(TableName []byte) error {
	req := &HbaseDeleteTableRequest{
		TableName: TableName,
	}
	res := &HbaseDeleteTableResponse{}
	err := s.Client.Call("deleteTable", req, res)
	if err == nil {
		switch {
		case res.Io != nil:
			err = res.Io
		}
	}
	return err
}

func (s *HbaseClient) DisableTable(TableName []byte) error {
	req := &HbaseDisableTableRequest{
		TableName: TableName,
	}
	res := &HbaseDisableTableResponse{}
	err := s.Client.Call("disableTable", req, res)
	if err == nil {
		switch {
		case res.Io != nil:
			err = res.Io
		}
	}
	return err
}

func (s *HbaseClient) EnableTable(TableName []byte) error {
	req := &HbaseEnableTableRequest{
		TableName: TableName,
	}
	res := &HbaseEnableTableResponse{}
	err := s.Client.Call("enableTable", req, res)
	if err == nil {
		switch {
		case res.Io != nil:
			err = res.Io
		}
	}
	return err
}

func (s *HbaseClient) Get(TableName []byte, Row []byte, Column []byte, Attributes map[string][]byte) ([]*TCell, error) {
	req := &HbaseGetRequest{
		TableName:  TableName,
		Row:        Row,
		Column:     Column,
		Attributes: Attributes,
	}
	res := &HbaseGetResponse{}
	err := s.Client.Call("get", req, res)
	if err == nil {
		switch {
		case res.Io != nil:
			err = res.Io
		}
	}
	return res.Value, err
}

func (s *HbaseClient) GetColumnDescriptors(TableName []byte) (map[string]*ColumnDescriptor, error) {
	req := &HbaseGetColumnDescriptorsRequest{
		TableName: TableName,
	}
	res := &HbaseGetColumnDescriptorsResponse{}
	err := s.Client.Call("getColumnDescriptors", req, res)
	if err == nil {
		switch {
		case res.Io != nil:
			err = res.Io
		}
	}
	return res.Value, err
}

func (s *HbaseClient) GetRegionInfo(Row []byte) (*TRegionInfo, error) {
	req := &HbaseGetRegionInfoRequest{
		Row: Row,
	}
	res := &HbaseGetRegionInfoResponse{}
	err := s.Client.Call("getRegionInfo", req, res)
	if err == nil {
		switch {
		case res.Io != nil:
			err = res.Io
		}
	}
	return res.Value, err
}

func (s *HbaseClient) GetRow(TableName []byte, Row []byte, Attributes map[string][]byte) ([]*TRowResult, error) {
	req := &HbaseGetRowRequest{
		TableName:  TableName,
		Row:        Row,
		Attributes: Attributes,
	}
	res := &HbaseGetRowResponse{}
	err := s.Client.Call("getRow", req, res)
	if err == nil {
		switch {
		case res.Io != nil:
			err = res.Io
		}
	}
	return res.Value, err
}

func (s *HbaseClient) GetRowOrBefore(TableName []byte, Row []byte, Family []byte) ([]*TCell, error) {
	req := &HbaseGetRowOrBeforeRequest{
		TableName: TableName,
		Row:       Row,
		Family:    Family,
	}
	res := &HbaseGetRowOrBeforeResponse{}
	err := s.Client.Call("getRowOrBefore", req, res)
	if err == nil {
		switch {
		case res.Io != nil:
			err = res.Io
		}
	}
	return res.Value, err
}

func (s *HbaseClient) GetRowTs(TableName []byte, Row []byte, Timestamp int64, Attributes map[string][]byte) ([]*TRowResult, error) {
	req := &HbaseGetRowTsRequest{
		TableName:  TableName,
		Row:        Row,
		Timestamp:  Timestamp,
		Attributes: Attributes,
	}
	res := &HbaseGetRowTsResponse{}
	err := s.Client.Call("getRowTs", req, res)
	if err == nil {
		switch {
		case res.Io != nil:
			err = res.Io
		}
	}
	return res.Value, err
}

func (s *HbaseClient) GetRowWithColumns(TableName []byte, Row []byte, Columns [][]byte, Attributes map[string][]byte) ([]*TRowResult, error) {
	req := &HbaseGetRowWithColumnsRequest{
		TableName:  TableName,
		Row:        Row,
		Columns:    Columns,
		Attributes: Attributes,
	}
	res := &HbaseGetRowWithColumnsResponse{}
	err := s.Client.Call("getRowWithColumns", req, res)
	if err == nil {
		switch {
		case res.Io != nil:
			err = res.Io
		}
	}
	return res.Value, err
}

func (s *HbaseClient) GetRowWithColumnsTs(TableName []byte, Row []byte, Columns [][]byte, Timestamp int64, Attributes map[string][]byte) ([]*TRowResult, error) {
	req := &HbaseGetRowWithColumnsTsRequest{
		TableName:  TableName,
		Row:        Row,
		Columns:    Columns,
		Timestamp:  Timestamp,
		Attributes: Attributes,
	}
	res := &HbaseGetRowWithColumnsTsResponse{}
	err := s.Client.Call("getRowWithColumnsTs", req, res)
	if err == nil {
		switch {
		case res.Io != nil:
			err = res.Io
		}
	}
	return res.Value, err
}

func (s *HbaseClient) GetRows(TableName []byte, Rows [][]byte, Attributes map[string][]byte) ([]*TRowResult, error) {
	req := &HbaseGetRowsRequest{
		TableName:  TableName,
		Rows:       Rows,
		Attributes: Attributes,
	}
	res := &HbaseGetRowsResponse{}
	err := s.Client.Call("getRows", req, res)
	if err == nil {
		switch {
		case res.Io != nil:
			err = res.Io
		}
	}
	return res.Value, err
}

func (s *HbaseClient) GetRowsTs(TableName []byte, Rows [][]byte, Timestamp int64, Attributes map[string][]byte) ([]*TRowResult, error) {
	req := &HbaseGetRowsTsRequest{
		TableName:  TableName,
		Rows:       Rows,
		Timestamp:  Timestamp,
		Attributes: Attributes,
	}
	res := &HbaseGetRowsTsResponse{}
	err := s.Client.Call("getRowsTs", req, res)
	if err == nil {
		switch {
		case res.Io != nil:
			err = res.Io
		}
	}
	return res.Value, err
}

func (s *HbaseClient) GetRowsWithColumns(TableName []byte, Rows [][]byte, Columns [][]byte, Attributes map[string][]byte) ([]*TRowResult, error) {
	req := &HbaseGetRowsWithColumnsRequest{
		TableName:  TableName,
		Rows:       Rows,
		Columns:    Columns,
		Attributes: Attributes,
	}
	res := &HbaseGetRowsWithColumnsResponse{}
	err := s.Client.Call("getRowsWithColumns", req, res)
	if err == nil {
		switch {
		case res.Io != nil:
			err = res.Io
		}
	}
	return res.Value, err
}

func (s *HbaseClient) GetRowsWithColumnsTs(TableName []byte, Rows [][]byte, Columns [][]byte, Timestamp int64, Attributes map[string][]byte) ([]*TRowResult, error) {
	req := &HbaseGetRowsWithColumnsTsRequest{
		TableName:  TableName,
		Rows:       Rows,
		Columns:    Columns,
		Timestamp:  Timestamp,
		Attributes: Attributes,
	}
	res := &HbaseGetRowsWithColumnsTsResponse{}
	err := s.Client.Call("getRowsWithColumnsTs", req, res)
	if err == nil {
		switch {
		case res.Io != nil:
			err = res.Io
		}
	}
	return res.Value, err
}

func (s *HbaseClient) GetTableNames() ([][]byte, error) {
	req := &HbaseGetTableNamesRequest{}
	res := &HbaseGetTableNamesResponse{}
	err := s.Client.Call("getTableNames", req, res)
	if err == nil {
		switch {
		case res.Io != nil:
			err = res.Io
		}
	}
	return res.Value, err
}

func (s *HbaseClient) GetTableRegions(TableName []byte) ([]*TRegionInfo, error) {
	req := &HbaseGetTableRegionsRequest{
		TableName: TableName,
	}
	res := &HbaseGetTableRegionsResponse{}
	err := s.Client.Call("getTableRegions", req, res)
	if err == nil {
		switch {
		case res.Io != nil:
			err = res.Io
		}
	}
	return res.Value, err
}

func (s *HbaseClient) GetVer(TableName []byte, Row []byte, Column []byte, NumVersions int32, Attributes map[string][]byte) ([]*TCell, error) {
	req := &HbaseGetVerRequest{
		TableName:   TableName,
		Row:         Row,
		Column:      Column,
		NumVersions: NumVersions,
		Attributes:  Attributes,
	}
	res := &HbaseGetVerResponse{}
	err := s.Client.Call("getVer", req, res)
	if err == nil {
		switch {
		case res.Io != nil:
			err = res.Io
		}
	}
	return res.Value, err
}

func (s *HbaseClient) GetVerTs(TableName []byte, Row []byte, Column []byte, Timestamp int64, NumVersions int32, Attributes map[string][]byte) ([]*TCell, error) {
	req := &HbaseGetVerTsRequest{
		TableName:   TableName,
		Row:         Row,
		Column:      Column,
		Timestamp:   Timestamp,
		NumVersions: NumVersions,
		Attributes:  Attributes,
	}
	res := &HbaseGetVerTsResponse{}
	err := s.Client.Call("getVerTs", req, res)
	if err == nil {
		switch {
		case res.Io != nil:
			err = res.Io
		}
	}
	return res.Value, err
}

func (s *HbaseClient) Increment(Increment *TIncrement) error {
	req := &HbaseIncrementRequest{
		Increment: Increment,
	}
	res := &HbaseIncrementResponse{}
	err := s.Client.Call("increment", req, res)
	if err == nil {
		switch {
		case res.Io != nil:
			err = res.Io
		}
	}
	return err
}

func (s *HbaseClient) IncrementRows(Increments []*TIncrement) error {
	req := &HbaseIncrementRowsRequest{
		Increments: Increments,
	}
	res := &HbaseIncrementRowsResponse{}
	err := s.Client.Call("incrementRows", req, res)
	if err == nil {
		switch {
		case res.Io != nil:
			err = res.Io
		}
	}
	return err
}

func (s *HbaseClient) IsTableEnabled(TableName []byte) (bool, error) {
	req := &HbaseIsTableEnabledRequest{
		TableName: TableName,
	}
	res := &HbaseIsTableEnabledResponse{}
	err := s.Client.Call("isTableEnabled", req, res)
	if err == nil {
		switch {
		case res.Io != nil:
			err = res.Io
		}
	}
	return res.Value, err
}

func (s *HbaseClient) MajorCompact(TableNameOrRegionName []byte) error {
	req := &HbaseMajorCompactRequest{
		TableNameOrRegionName: TableNameOrRegionName,
	}
	res := &HbaseMajorCompactResponse{}
	err := s.Client.Call("majorCompact", req, res)
	if err == nil {
		switch {
		case res.Io != nil:
			err = res.Io
		}
	}
	return err
}

func (s *HbaseClient) MutateRow(TableName []byte, Row []byte, Mutations []*Mutation, Attributes map[string][]byte) error {
	req := &HbaseMutateRowRequest{
		TableName:  TableName,
		Row:        Row,
		Mutations:  Mutations,
		Attributes: Attributes,
	}
	res := &HbaseMutateRowResponse{}
	err := s.Client.Call("mutateRow", req, res)
	if err == nil {
		switch {
		case res.Io != nil:
			err = res.Io
		case res.Ia != nil:
			err = res.Ia
		}
	}
	return err
}

func (s *HbaseClient) MutateRowTs(TableName []byte, Row []byte, Mutations []*Mutation, Timestamp int64, Attributes map[string][]byte) error {
	req := &HbaseMutateRowTsRequest{
		TableName:  TableName,
		Row:        Row,
		Mutations:  Mutations,
		Timestamp:  Timestamp,
		Attributes: Attributes,
	}
	res := &HbaseMutateRowTsResponse{}
	err := s.Client.Call("mutateRowTs", req, res)
	if err == nil {
		switch {
		case res.Io != nil:
			err = res.Io
		case res.Ia != nil:
			err = res.Ia
		}
	}
	return err
}

func (s *HbaseClient) MutateRows(TableName []byte, RowBatches []*BatchMutation, Attributes map[string][]byte) error {
	req := &HbaseMutateRowsRequest{
		TableName:  TableName,
		RowBatches: RowBatches,
		Attributes: Attributes,
	}
	res := &HbaseMutateRowsResponse{}
	err := s.Client.Call("mutateRows", req, res)
	if err == nil {
		switch {
		case res.Io != nil:
			err = res.Io
		case res.Ia != nil:
			err = res.Ia
		}
	}
	return err
}

func (s *HbaseClient) MutateRowsTs(TableName []byte, RowBatches []*BatchMutation, Timestamp int64, Attributes map[string][]byte) error {
	req := &HbaseMutateRowsTsRequest{
		TableName:  TableName,
		RowBatches: RowBatches,
		Timestamp:  Timestamp,
		Attributes: Attributes,
	}
	res := &HbaseMutateRowsTsResponse{}
	err := s.Client.Call("mutateRowsTs", req, res)
	if err == nil {
		switch {
		case res.Io != nil:
			err = res.Io
		case res.Ia != nil:
			err = res.Ia
		}
	}
	return err
}

func (s *HbaseClient) ScannerClose(Id int32) error {
	req := &HbaseScannerCloseRequest{
		Id: Id,
	}
	res := &HbaseScannerCloseResponse{}
	err := s.Client.Call("scannerClose", req, res)
	if err == nil {
		switch {
		case res.Io != nil:
			err = res.Io
		case res.Ia != nil:
			err = res.Ia
		}
	}
	return err
}

func (s *HbaseClient) ScannerGet(Id int32) ([]*TRowResult, error) {
	req := &HbaseScannerGetRequest{
		Id: Id,
	}
	res := &HbaseScannerGetResponse{}
	err := s.Client.Call("scannerGet", req, res)
	if err == nil {
		switch {
		case res.Io != nil:
			err = res.Io
		case res.Ia != nil:
			err = res.Ia
		}
	}
	return res.Value, err
}

func (s *HbaseClient) ScannerGetList(Id int32, NbRows int32) ([]*TRowResult, error) {
	req := &HbaseScannerGetListRequest{
		Id:     Id,
		NbRows: NbRows,
	}
	res := &HbaseScannerGetListResponse{}
	err := s.Client.Call("scannerGetList", req, res)
	if err == nil {
		switch {
		case res.Io != nil:
			err = res.Io
		case res.Ia != nil:
			err = res.Ia
		}
	}
	return res.Value, err
}

func (s *HbaseClient) ScannerOpen(TableName []byte, StartRow []byte, Columns [][]byte, Attributes map[string][]byte) (int32, error) {
	req := &HbaseScannerOpenRequest{
		TableName:  TableName,
		StartRow:   StartRow,
		Columns:    Columns,
		Attributes: Attributes,
	}
	res := &HbaseScannerOpenResponse{}
	err := s.Client.Call("scannerOpen", req, res)
	if err == nil {
		switch {
		case res.Io != nil:
			err = res.Io
		}
	}
	return res.Value, err
}

func (s *HbaseClient) ScannerOpenTs(TableName []byte, StartRow []byte, Columns [][]byte, Timestamp int64, Attributes map[string][]byte) (int32, error) {
	req := &HbaseScannerOpenTsRequest{
		TableName:  TableName,
		StartRow:   StartRow,
		Columns:    Columns,
		Timestamp:  Timestamp,
		Attributes: Attributes,
	}
	res := &HbaseScannerOpenTsResponse{}
	err := s.Client.Call("scannerOpenTs", req, res)
	if err == nil {
		switch {
		case res.Io != nil:
			err = res.Io
		}
	}
	return res.Value, err
}

func (s *HbaseClient) ScannerOpenWithPrefix(TableName []byte, StartAndPrefix []byte, Columns [][]byte, Attributes map[string][]byte) (int32, error) {
	req := &HbaseScannerOpenWithPrefixRequest{
		TableName:      TableName,
		StartAndPrefix: StartAndPrefix,
		Columns:        Columns,
		Attributes:     Attributes,
	}
	res := &HbaseScannerOpenWithPrefixResponse{}
	err := s.Client.Call("scannerOpenWithPrefix", req, res)
	if err == nil {
		switch {
		case res.Io != nil:
			err = res.Io
		}
	}
	return res.Value, err
}

func (s *HbaseClient) ScannerOpenWithScan(TableName []byte, Scan *TScan, Attributes map[string][]byte) (int32, error) {
	req := &HbaseScannerOpenWithScanRequest{
		TableName:  TableName,
		Scan:       Scan,
		Attributes: Attributes,
	}
	res := &HbaseScannerOpenWithScanResponse{}
	err := s.Client.Call("scannerOpenWithScan", req, res)
	if err == nil {
		switch {
		case res.Io != nil:
			err = res.Io
		}
	}
	return res.Value, err
}

func (s *HbaseClient) ScannerOpenWithStop(TableName []byte, StartRow []byte, StopRow []byte, Columns [][]byte, Attributes map[string][]byte) (int32, error) {
	req := &HbaseScannerOpenWithStopRequest{
		TableName:  TableName,
		StartRow:   StartRow,
		StopRow:    StopRow,
		Columns:    Columns,
		Attributes: Attributes,
	}
	res := &HbaseScannerOpenWithStopResponse{}
	err := s.Client.Call("scannerOpenWithStop", req, res)
	if err == nil {
		switch {
		case res.Io != nil:
			err = res.Io
		}
	}
	return res.Value, err
}

func (s *HbaseClient) ScannerOpenWithStopTs(TableName []byte, StartRow []byte, StopRow []byte, Columns [][]byte, Timestamp int64, Attributes map[string][]byte) (int32, error) {
	req := &HbaseScannerOpenWithStopTsRequest{
		TableName:  TableName,
		StartRow:   StartRow,
		StopRow:    StopRow,
		Columns:    Columns,
		Timestamp:  Timestamp,
		Attributes: Attributes,
	}
	res := &HbaseScannerOpenWithStopTsResponse{}
	err := s.Client.Call("scannerOpenWithStopTs", req, res)
	if err == nil {
		switch {
		case res.Io != nil:
			err = res.Io
		}
	}
	return res.Value, err
}
